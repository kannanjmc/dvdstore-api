{
  "swagger": "2.0",
  "info": {
    "description": "",
    "version": "1.0.0",
    "title": "Product Store",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": ""
    },
    "license": {
      "name": "",
      "url": ""
    }
  },
  "host": "localhost:8080",
  "basePath": "/api/v1/dvdstore",
  "tags": [
    {
      "name": "products",
      "description": "Everything about your products",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "store",
      "description": "Access to DVD Store orders"
    },
    {
      "name": "customer",
      "description": "Operations about customer",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Lists products",
        "description": "Returns a list of products",
        "operationId": "listProducts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Starting index of page",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of array",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Products"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "products"
        ],
        "summary": "Add a new product to the store",
        "description": "",
        "operationId": "addProduct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCreate"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "dvdstore_auth": [
              "write:products",
              "read:products"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "products"
        ],
        "summary": "Update an existing product",
        "description": "",
        "operationId": "updateProduct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCreate"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "dvdstore_auth": [
              "write:products",
              "read:products"
            ]
          }
        ]
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Find product by ID",
        "description": "Returns a single product",
        "operationId": "getProductById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductCreate"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "products"
        ],
        "summary": "Deletes a product",
        "description": "",
        "operationId": "deleteProduct",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "path",
            "description": "Product id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "dvdstore_auth": [
              "write:products",
              "read:products"
            ]
          }
        ]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns product inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a product",
        "description": "",
        "operationId": "placeOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the product",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of product that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1.0,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/customer": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createCustomer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/customer/login": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginCustomer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/customer/logout": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutCustomer",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/customer/{username}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getCustomerByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "put": {
        "tags": [
          "customer"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateCustomer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "delete": {
        "tags": [
          "customer"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteCustomer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "dvdstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://productstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:products": "modify products in your account",
        "read:products": "read your products"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Pagination": {
      "properties": {
        "start": {
          "type": "integer",
          "format": "int64",
          "description": "requested starting index of page",
          "example": 1
        },
        "resultSize": {
          "type": "integer",
          "format": "int64",
          "description": "number of items per page",
          "example": 10
        },
        "next": {
          "type": "string",
          "format": "url",
          "description": "url to next page",
          "example": "http://scottwseo.com/api/v1/dvdstore/products?start=3&size=10"
        },
        "prev": {
          "type": "string",
          "format": "url",
          "description": "url to previous page",
          "example": "http://scottwseo.com/api/v1/dvdstore/products?start=1&size=10"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "total number of items",
          "example": 1000
        },
        "totalPages": {
          "type": "integer",
          "format": "int64",
          "description": "total number of pages",
          "example": 100
        }
      }
    },

    "Products": {
      "properties": {
        "pagination": {
          "$ref": "#/definitions/Pagination"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        }
      }
    },
    "ProductCreate": {
      "type": "object",
      "required": [
        "category",
        "title",
        "actor",
        "price",
        "common_prod_id"
      ],
      "properties": {
        "prod_id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "title": {
          "type": "string",
          "example": "star wars"
        },
        "actor": {
          "type": "string",
          "example": "harrison ford"
        },
        "price": {
          "type": "number",
          "example": 10.99
        },
        "common_prod_id": {
          "type": "integer",
          "format": "int64",
          "example": 1
        }
      }
    },
    "Product": {
      "type": "object",
      "required": [
        "category",
        "title",
        "actor",
        "price",
        "common_prod_id"
      ],
      "properties": {
        "prod_id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "type": "integer",
          "example": "1"
        },
        "title": {
          "type": "string",
          "example": "star wars"
        },
        "actor": {
          "type": "string",
          "example": "harrison ford"
        },
        "price": {
          "type": "number",
          "example": "10.99"
        },
        "common_prod_id": {
          "type": "integer",
          "format": "int64",
          "example": "1"
        }
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "order_date",
        "customer_id",
        "net_amount",
        "tax",
        "total_amount"
      ],
      "properties": {
        "customer_id": {
          "type": "integer",
          "format": "int64"
        },
        "order_date": {
          "type": "string",
          "format": "date-time"
        },
        "customer_id": {
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "net_amount": {
          "type": "number",
          "example": 313.24
        },
        "tax": {
          "type": "number",
          "example": 25.84
        },
        "total_amount": {
          "type": "number",
          "example": 339.08
        },
        "orderlines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLine"
          }
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "OrderLine": {
      "type": "object",
      "required": [
        "product_id",
        "quantity",
        "order_date"
      ],
      "properties": {
        "product_id": {
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "quantity": {
          "type": "integer",
          "format": "int64",
          "example": 2
        },
        "order_date": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "OrderLine"
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "customer_id": {
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "first_name": {
          "type": "string",
          "example": "William"
        },
        "lastName": {
          "type": "string",
          "example": "Joshnson"
        },
        "address1": {
          "type": "string",
          "example": "16519 71st Ave"
        },
        "city": {
          "type": "string",
          "example": "New York"
        },
        "state": {
          "type": "string",
          "example": "NY"
        },
       "zip": {
          "type": "integer",
          "example": "NY"
        },
        "country": {
          "type": "string",
          "example": "USA"
        },
        "region": {
          "type": "string"
        },
        "email": {
          "type": "",
          "example": "scott.seo@gmail.com"
        },
        "phone": {
          "type": "string"
        },
        "credit_card_type": {
          "type": "integer",
          "format": "int32",
          "description": "Customer Status"
        },
        "credit_card": {
          "type": "string"
        },
        "credit_card_expiration": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "age"
        },
        "income": {
          "type": "integer",
          "format": "int32",
          "description": "age"
        },
        "gender": {
          "type": "string",
          "enum": [
            "M",
            "F"
          ]

        }
      },
      "xml": {
        "name": "Customer"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }

  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}